{"version":3,"sources":["../../../src/schema/extensions/index.js"],"names":["GraphQLBoolean","GraphQLNonNull","GraphQLDirective","GraphQLString","DirectiveLocation","defaultFieldResolver","require","link","fileByPath","getDateResolver","typeExtensions","infer","description","args","noDefaultResolvers","type","deprecationReason","dontInfer","builtInFieldExtensions","dateformat","name","formatString","locale","extend","fieldConfig","by","defaultValue","from","resolve","fileByRelativePath","proxy","resolver","source","context","info","fieldName","internalExtensionNames","reservedExtensionNames","Object","keys","toDirectives","schemaComposer","extensions","locations","map","extension","normalizedArgs","typeMapper","convertArgConfigMap","addDirectives","fieldExtensions","fieldDirectives","FIELD_DEFINITION","forEach","directive","addDirective","typeDirectives","OBJECT","processFieldExtensions","typeComposer","parentSpan","getFieldNames","getFieldExtensions","filter","includes","sort","a","prevFieldConfig","getFieldConfig","extendField","module","exports"],"mappings":"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","sourcesContent":["// @flow\nconst {\n  GraphQLBoolean,\n  GraphQLNonNull,\n  GraphQLDirective,\n  GraphQLString,\n  DirectiveLocation,\n  defaultFieldResolver,\n} = require(`graphql`)\n\nconst { link, fileByPath } = require(`../resolvers`)\nconst { getDateResolver } = require(`../types/date`)\n\nimport type { GraphQLFieldConfigArgumentMap, GraphQLFieldConfig } from \"graphql\"\nimport type { ComposeFieldConfig } from \"graphql-compose\"\n\nexport interface GraphQLFieldExtensionDefinition {\n  name: string;\n  args?: GraphQLFieldConfigArgumentMap;\n  extend(\n    args: GraphQLFieldConfigArgumentMap,\n    prevFieldConfig: GraphQLFieldConfig\n  ): $Shape<ComposeFieldConfig>;\n}\n\nconst typeExtensions = {\n  infer: {\n    description: `Infer field types from field values.`,\n    args: {\n      noDefaultResolvers: {\n        type: GraphQLBoolean,\n        description: `Don't add default resolvers to defined fields.`,\n        deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,\n      },\n    },\n  },\n  dontInfer: {\n    description: `Do not infer field types from field values.`,\n    args: {\n      noDefaultResolvers: {\n        type: GraphQLBoolean,\n        description: `Don't add default resolvers to defined fields.`,\n        deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,\n      },\n    },\n  },\n}\n\nconst builtInFieldExtensions = {\n  dateformat: {\n    name: `dateformat`,\n    description: `Add date formating options.`,\n    args: {\n      formatString: { type: GraphQLString },\n      locale: { type: GraphQLString },\n    },\n    extend(args, fieldConfig) {\n      return getDateResolver(args)\n    },\n  },\n\n  link: {\n    name: `link`,\n    description: `Link to node by foreign-key relation.`,\n    args: {\n      by: {\n        type: new GraphQLNonNull(GraphQLString),\n        defaultValue: `id`,\n      },\n      from: {\n        type: GraphQLString,\n      },\n    },\n    extend(args, fieldConfig) {\n      return {\n        resolve: link(args),\n      }\n    },\n  },\n\n  fileByRelativePath: {\n    name: `fileByRelativePath`,\n    description: `Link to File node by relative path.`,\n    args: {\n      from: {\n        type: GraphQLString,\n      },\n    },\n    extend(args, fieldConfig) {\n      return {\n        resolve: fileByPath(args),\n      }\n    },\n  },\n\n  proxy: {\n    name: `proxy`,\n    description: `Proxy resolver from another field.`,\n    args: {\n      from: {\n        type: new GraphQLNonNull(GraphQLString),\n      },\n    },\n    extend({ from }, fieldConfig) {\n      const resolver = fieldConfig.resolve || defaultFieldResolver\n      return {\n        resolve(source, args, context, info) {\n          return resolver(source, args, context, {\n            ...info,\n            fieldName: from,\n          })\n        },\n      }\n    },\n  },\n}\n\n// Reserved for internal use\nconst internalExtensionNames = [\n  `createdFrom`,\n  `default`,\n  `directives`,\n  `infer`,\n  `plugin`,\n]\nconst reservedExtensionNames = [\n  ...internalExtensionNames,\n  ...Object.keys(builtInFieldExtensions),\n]\n\nconst toDirectives = ({ schemaComposer, extensions, locations }) =>\n  Object.keys(extensions).map(name => {\n    const extension = extensions[name]\n    const { args, description } = extension\n    // Support the `graphql-compose` style of directly providing the field type as string\n    const normalizedArgs = schemaComposer.typeMapper.convertArgConfigMap(args)\n    return new GraphQLDirective({\n      name,\n      args: normalizedArgs,\n      description,\n      locations,\n    })\n  })\n\nconst addDirectives = ({ schemaComposer, fieldExtensions = {} }) => {\n  const fieldDirectives = toDirectives({\n    schemaComposer,\n    extensions: fieldExtensions,\n    locations: [DirectiveLocation.FIELD_DEFINITION],\n  })\n  fieldDirectives.forEach(directive => schemaComposer.addDirective(directive))\n  const typeDirectives = toDirectives({\n    schemaComposer,\n    extensions: typeExtensions,\n    locations: [DirectiveLocation.OBJECT],\n  })\n  typeDirectives.forEach(directive => schemaComposer.addDirective(directive))\n}\n\nconst processFieldExtensions = ({\n  fieldExtensions = {},\n  schemaComposer,\n  typeComposer,\n  parentSpan,\n}) => {\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const extensions = typeComposer.getFieldExtensions(fieldName)\n    Object.keys(extensions)\n      .filter(name => !internalExtensionNames.includes(name))\n      .sort(a => a === `proxy`) // Ensure `proxy` is run last\n      .forEach(name => {\n        const { extend } = fieldExtensions[name] || {}\n        if (typeof extend === `function`) {\n          // Always get fresh field config as it will have been changed\n          // by previous field extension\n          const prevFieldConfig = typeComposer.getFieldConfig(fieldName)\n          typeComposer.extendField(\n            fieldName,\n            extend(extensions[name], prevFieldConfig)\n          )\n        }\n      })\n  })\n}\n\nmodule.exports = {\n  addDirectives,\n  builtInFieldExtensions,\n  internalExtensionNames,\n  processFieldExtensions,\n  reservedExtensionNames,\n}\n"],"file":"index.js"}