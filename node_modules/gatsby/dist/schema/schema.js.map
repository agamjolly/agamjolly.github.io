{"version":3,"sources":["../../src/schema/schema.js"],"names":["_","require","invariant","isSpecifiedScalarType","isIntrospectionType","defaultFieldResolver","assertValidName","parse","GraphQLNonNull","GraphQLList","ObjectTypeComposer","InterfaceTypeComposer","UnionTypeComposer","InputTypeComposer","ScalarTypeComposer","EnumTypeComposer","apiRunner","report","addNodeInterfaceFields","addInferredType","addInferredTypes","findOne","findManyPaginated","processFieldExtensions","internalExtensionNames","getPagination","getSortInput","getFilterInput","isGatsbyType","GatsbyGraphQLTypeKind","buildSchema","schemaComposer","nodeStore","types","typeMapping","fieldExtensions","thirdPartySchemas","typeConflictReporter","parentSpan","updateSchemaComposer","schema","rebuildSchemaWithSitePage","typeComposer","getOTC","processTypeComposer","module","exports","addTypes","addSetFieldsOnGraphQLNodeTypeFields","Promise","all","Array","from","values","map","addThirdPartySchemas","addCustomResolveFunctions","hasInterface","addResolvers","addConvenienceChildrenFields","addTypeToRootQuery","forEach","typeOrTypeDef","plugin","parsedTypes","createdFrom","parseTypeDefs","typeDefs","error","reportParsingError","type","processAddedType","createTypeComposerFromGatsbyType","typeName","getTypeName","checkIsAllowedTypeName","has","get","mergeTypes","name","typeOwner","getExtension","merge","isNamedTypeComposer","extendExtensions","getExtensions","addExtensions","warn","addAsComposer","getResolveType","setResolveType","node","internal","addSchemaMustHaveType","setExtension","directives","getDirectives","args","noDefaultResolvers","getFieldNames","fieldName","setFieldExtension","getFieldDirectives","getFieldExtensions","Object","keys","filter","includes","definition","getDirective","defaultValue","undefined","arg","argumentDef","find","value","validate","message","hasExtension","endsWith","kind","OBJECT","createTemp","config","interfaces","iface","getIFTC","getType","INPUT_OBJECT","UNION","INTERFACE","JSON","stringify","tc","result","nodes","getNodesByType","traceId","fields","addNestedFields","schemaQueryType","getQueryType","queryTC","createTempTC","processThirdPartyTypeFields","Query","addFields","getFields","getTypeMap","createTC","field","getField","fieldType","toString","replace","extendField","intermediateSchema","createResolvers","resolvers","fieldConfig","hasField","originalFieldConfig","getFieldConfig","originalTypeName","originalResolver","resolve","fieldTypeName","isArray","stringifyArray","newConfig","source","context","info","removeInputTypeComposer","sortInputTC","filterInputTC","paginationTC","addResolver","sort","skip","limit","childNodesByType","groupChildNodesByType","typeChildren","maxChildCount","maxBy","groupBy","c","parent","g","length","createChildrenField","createChildField","camelCase","path","nodeModel","getNodesByIds","ids","children","flatMap","getNode","queryName","queryNamePlural","getResolver","parseTypes","doc","definitions","def","parsedType","typeMapper","makeSchemaDef","set","push","locations","codeFrameColumns","frame","body","start","linesAbove","linesBelow","panic","arr","item","Error","ofType","v","parseValue"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst {\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  defaultFieldResolver,\n  assertValidName,\n  parse,\n  GraphQLNonNull,\n  GraphQLList,\n} = require(`graphql`)\nconst {\n  ObjectTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  InputTypeComposer,\n  ScalarTypeComposer,\n  EnumTypeComposer,\n} = require(`graphql-compose`)\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { addNodeInterfaceFields } = require(`./types/node-interface`)\nconst { addInferredType, addInferredTypes } = require(`./infer`)\nconst { findOne, findManyPaginated } = require(`./resolvers`)\nconst {\n  processFieldExtensions,\n  internalExtensionNames,\n} = require(`./extensions`)\nconst { getPagination } = require(`./types/pagination`)\nconst { getSortInput } = require(`./types/sort`)\nconst { getFilterInput } = require(`./types/filter`)\nconst { isGatsbyType, GatsbyGraphQLTypeKind } = require(`./types/type-builders`)\n\nconst buildSchema = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await updateSchemaComposer({\n    schemaComposer,\n    nodeStore,\n    types,\n    typeMapping,\n    fieldExtensions,\n    thirdPartySchemas,\n    typeConflictReporter,\n    parentSpan,\n  })\n  // const { printSchema } = require(`graphql`)\n  const schema = schemaComposer.buildSchema()\n  // console.log(printSchema(schema))\n  return schema\n}\n\nconst rebuildSchemaWithSitePage = async ({\n  schemaComposer,\n  nodeStore,\n  typeMapping,\n  fieldExtensions,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  const typeComposer = addInferredType({\n    schemaComposer,\n    typeComposer: schemaComposer.getOTC(`SitePage`),\n    nodeStore,\n    typeConflictReporter,\n    typeMapping,\n    parentSpan,\n  })\n  await processTypeComposer({\n    schemaComposer,\n    typeComposer,\n    fieldExtensions,\n    nodeStore,\n    parentSpan,\n  })\n  return schemaComposer.buildSchema()\n}\n\nmodule.exports = {\n  buildSchema,\n  rebuildSchemaWithSitePage,\n}\n\nconst updateSchemaComposer = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await addTypes({ schemaComposer, parentSpan, types })\n  await addInferredTypes({\n    schemaComposer,\n    nodeStore,\n    typeConflictReporter,\n    typeMapping,\n    parentSpan,\n  })\n  await addSetFieldsOnGraphQLNodeTypeFields({\n    schemaComposer,\n    nodeStore,\n    parentSpan,\n  })\n  await Promise.all(\n    Array.from(schemaComposer.values()).map(typeComposer =>\n      processTypeComposer({\n        schemaComposer,\n        typeComposer,\n        fieldExtensions,\n        nodeStore,\n        parentSpan,\n      })\n    )\n  )\n  await addThirdPartySchemas({ schemaComposer, thirdPartySchemas, parentSpan })\n  await addCustomResolveFunctions({ schemaComposer, parentSpan })\n}\n\nconst processTypeComposer = async ({\n  schemaComposer,\n  typeComposer,\n  fieldExtensions,\n  nodeStore,\n  parentSpan,\n}) => {\n  if (typeComposer instanceof ObjectTypeComposer) {\n    await processFieldExtensions({\n      schemaComposer,\n      typeComposer,\n      fieldExtensions,\n      parentSpan,\n    })\n    if (typeComposer.hasInterface(`Node`)) {\n      await addNodeInterfaceFields({ schemaComposer, typeComposer, parentSpan })\n      await addResolvers({ schemaComposer, typeComposer, parentSpan })\n      await addConvenienceChildrenFields({\n        schemaComposer,\n        typeComposer,\n        nodeStore,\n        parentSpan,\n      })\n      await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n    }\n  }\n}\n\nconst addTypes = ({ schemaComposer, types, parentSpan }) => {\n  types.forEach(({ typeOrTypeDef, plugin }) => {\n    if (typeof typeOrTypeDef === `string`) {\n      let parsedTypes\n      const createdFrom = `sdl`\n      try {\n        parsedTypes = parseTypeDefs({\n          typeDefs: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          schemaComposer,\n          parentSpan,\n        })\n      } catch (error) {\n        reportParsingError(error)\n        return\n      }\n      parsedTypes.forEach(type => {\n        processAddedType({\n          schemaComposer,\n          type,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      })\n    } else if (isGatsbyType(typeOrTypeDef)) {\n      const type = createTypeComposerFromGatsbyType({\n        schemaComposer,\n        type: typeOrTypeDef,\n        parentSpan,\n      })\n\n      if (type) {\n        const typeName = type.getTypeName()\n        const createdFrom = `typeBuilder`\n        checkIsAllowedTypeName(typeName)\n        if (schemaComposer.has(typeName)) {\n          const typeComposer = schemaComposer.get(typeName)\n          mergeTypes({\n            schemaComposer,\n            typeComposer,\n            type,\n            plugin,\n            createdFrom,\n            parentSpan,\n          })\n        } else {\n          processAddedType({\n            schemaComposer,\n            type,\n            parentSpan,\n            createdFrom,\n            plugin,\n          })\n        }\n      }\n    } else {\n      const typeName = typeOrTypeDef.name\n      const createdFrom = `graphql-js`\n      checkIsAllowedTypeName(typeName)\n      if (schemaComposer.has(typeName)) {\n        const typeComposer = schemaComposer.get(typeName)\n        mergeTypes({\n          schemaComposer,\n          typeComposer,\n          type: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          parentSpan,\n        })\n      } else {\n        processAddedType({\n          schemaComposer,\n          type: typeOrTypeDef,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      }\n    }\n  })\n}\n\nconst mergeTypes = ({\n  schemaComposer,\n  typeComposer,\n  type,\n  plugin,\n  createdFrom,\n  parentSpan,\n}) => {\n  // Only allow user or plugin owning the type to extend already existing type.\n  const typeOwner = typeComposer.getExtension(`plugin`)\n  if (\n    !plugin ||\n    plugin.name === `default-site-plugin` ||\n    plugin.name === typeOwner\n  ) {\n    typeComposer.merge(type)\n    if (isNamedTypeComposer(type)) {\n      typeComposer.extendExtensions(type.getExtensions())\n    }\n    addExtensions({ schemaComposer, typeComposer, plugin, createdFrom })\n    return true\n  } else {\n    report.warn(\n      `Plugin \\`${plugin.name}\\` tried to define the GraphQL type ` +\n        `\\`${typeComposer.getTypeName()}\\`, which has already been defined ` +\n        `by the plugin \\`${typeOwner}\\`.`\n    )\n    return false\n  }\n}\n\nconst processAddedType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n  createdFrom,\n  plugin,\n}) => {\n  const typeName = schemaComposer.addAsComposer(type)\n  const typeComposer = schemaComposer.get(typeName)\n  if (\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof UnionTypeComposer\n  ) {\n    if (!typeComposer.getResolveType()) {\n      typeComposer.setResolveType(node => node.internal.type)\n    }\n  }\n  schemaComposer.addSchemaMustHaveType(typeComposer)\n\n  addExtensions({ schemaComposer, typeComposer, plugin, createdFrom })\n\n  return typeComposer\n}\n\nconst addExtensions = ({\n  schemaComposer,\n  typeComposer,\n  plugin,\n  createdFrom,\n}) => {\n  typeComposer.setExtension(`createdFrom`, createdFrom)\n  typeComposer.setExtension(`plugin`, plugin ? plugin.name : null)\n\n  if (createdFrom === `sdl`) {\n    const directives = typeComposer.getDirectives()\n    directives.forEach(({ name, args }) => {\n      switch (name) {\n        case `infer`:\n        case `dontInfer`:\n          typeComposer.setExtension(`infer`, name === `infer`)\n          if (args.noDefaultResolvers != null) {\n            typeComposer.setExtension(\n              `addDefaultResolvers`,\n              !args.noDefaultResolvers\n            )\n          }\n          break\n        default:\n      }\n    })\n  }\n\n  if (\n    typeComposer instanceof ObjectTypeComposer ||\n    typeComposer instanceof InterfaceTypeComposer\n  ) {\n    typeComposer.getFieldNames().forEach(fieldName => {\n      typeComposer.setFieldExtension(fieldName, `createdFrom`, createdFrom)\n      typeComposer.setFieldExtension(\n        fieldName,\n        `plugin`,\n        plugin ? plugin.name : null\n      )\n\n      if (createdFrom === `sdl`) {\n        const directives = typeComposer.getFieldDirectives(fieldName)\n        directives.forEach(({ name, args }) => {\n          typeComposer.setFieldExtension(fieldName, name, args)\n        })\n      }\n\n      // Validate field extension args. `graphql-compose` already checks the\n      // type of directive args in `parseDirectives`, but we want to check\n      // extensions provided with type builders as well. Also, we warn if an\n      // extension option was provided which does not exist in the field\n      // extension definition.\n      const fieldExtensions = typeComposer.getFieldExtensions(fieldName)\n      const typeName = typeComposer.getTypeName()\n      Object.keys(fieldExtensions)\n        .filter(name => !internalExtensionNames.includes(name))\n        .forEach(name => {\n          const args = fieldExtensions[name]\n          try {\n            const definition = schemaComposer.getDirective(name)\n\n            // Handle `defaultValue` when not provided as directive\n            definition.args.forEach(({ name, defaultValue }) => {\n              if (args[name] === undefined && defaultValue !== undefined) {\n                args[name] = defaultValue\n              }\n            })\n\n            Object.keys(args).forEach(arg => {\n              const argumentDef = definition.args.find(\n                ({ name }) => name === arg\n              )\n              if (!argumentDef) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has invalid argument \\`${arg}\\`.`\n                )\n                return\n              }\n              const value = args[arg]\n              try {\n                validate(argumentDef.type, value)\n              } catch (error) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has argument \\`${arg}\\` with invalid value \"${value}\". ` +\n                    error.message\n                )\n              }\n            })\n          } catch (error) {\n            report.error(\n              `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                `is not available.`\n            )\n          }\n        })\n    })\n  }\n\n  if (typeComposer.hasExtension(`addDefaultResolvers`)) {\n    report.warn(\n      `Deprecation warning - \"noDefaultResolvers\" is deprecated. In Gatsby 3, ` +\n        `defined fields won't get resolvers, unless explicitly added with a ` +\n        `directive/extension.`\n    )\n  }\n\n  return typeComposer\n}\n\nconst checkIsAllowedTypeName = name => {\n  invariant(\n    name !== `Node`,\n    `The GraphQL type \\`Node\\` is reserved for internal use.`\n  )\n  invariant(\n    !name.endsWith(`FilterInput`) && !name.endsWith(`SortInput`),\n    `GraphQL type names ending with \"FilterInput\" or \"SortInput\" are ` +\n      `reserved for internal use. Please rename \\`${name}\\`.`\n  )\n  invariant(\n    ![`Boolean`, `Date`, `Float`, `ID`, `Int`, `JSON`, `String`].includes(name),\n    `The GraphQL type \\`${name}\\` is reserved for internal use by ` +\n      `built-in scalar types.`\n  )\n  assertValidName(name)\n}\n\nconst createTypeComposerFromGatsbyType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n}) => {\n  switch (type.kind) {\n    case GatsbyGraphQLTypeKind.OBJECT: {\n      return ObjectTypeComposer.createTemp(\n        {\n          ...type.config,\n          interfaces: () => {\n            if (type.config.interfaces) {\n              return type.config.interfaces.map(iface => {\n                if (typeof iface === `string`) {\n                  return schemaComposer.getIFTC(iface).getType()\n                } else {\n                  return iface\n                }\n              })\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INPUT_OBJECT: {\n      return InputTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    case GatsbyGraphQLTypeKind.UNION: {\n      return UnionTypeComposer.createTemp(\n        {\n          ...type.config,\n          types: () => {\n            if (type.config.types) {\n              return type.config.types.map(typeName =>\n                schemaComposer.getOTC(typeName).getType()\n              )\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INTERFACE: {\n      return InterfaceTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    default: {\n      report.warn(`Illegal type definition: ${JSON.stringify(type.config)}`)\n      return null\n    }\n  }\n}\n\nconst addSetFieldsOnGraphQLNodeTypeFields = ({\n  schemaComposer,\n  nodeStore,\n  parentSpan,\n}) =>\n  Promise.all(\n    Array.from(schemaComposer.values()).map(async tc => {\n      if (tc instanceof ObjectTypeComposer && tc.hasInterface(`Node`)) {\n        const typeName = tc.getTypeName()\n        const result = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n          type: {\n            name: typeName,\n            nodes: nodeStore.getNodesByType(typeName),\n          },\n          traceId: `initial-setFieldsOnGraphQLNodeType`,\n          parentSpan,\n        })\n        if (result) {\n          // NOTE: `setFieldsOnGraphQLNodeType` only allows setting\n          // nested fields with a path as property name, i.e.\n          // `{ 'frontmatter.published': 'Boolean' }`, but not in the form\n          // `{ frontmatter: { published: 'Boolean' }}`\n          result.forEach(fields => tc.addNestedFields(fields))\n        }\n      }\n    })\n  )\n\nconst addThirdPartySchemas = ({\n  schemaComposer,\n  thirdPartySchemas,\n  parentSpan,\n}) => {\n  thirdPartySchemas.forEach(schema => {\n    const schemaQueryType = schema.getQueryType()\n    const queryTC = schemaComposer.createTempTC(schemaQueryType)\n    processThirdPartyTypeFields({ typeComposer: queryTC, schemaQueryType })\n    schemaComposer.Query.addFields(queryTC.getFields())\n\n    // Explicitly add the third-party schema's types, so they can be targeted\n    // in `createResolvers` API.\n    const types = schema.getTypeMap()\n    Object.keys(types).forEach(typeName => {\n      const type = types[typeName]\n      if (\n        type !== schemaQueryType &&\n        !isSpecifiedScalarType(type) &&\n        !isIntrospectionType(type) &&\n        type.name !== `Date` &&\n        type.name !== `JSON`\n      ) {\n        const typeComposer = schemaComposer.createTC(type)\n        if (\n          typeComposer instanceof ObjectTypeComposer ||\n          typeComposer instanceof InterfaceTypeComposer\n        ) {\n          processThirdPartyTypeFields({ typeComposer, schemaQueryType })\n        }\n        typeComposer.setExtension(`createdFrom`, `thirdPartySchema`)\n        schemaComposer.addSchemaMustHaveType(typeComposer)\n      }\n    })\n  })\n}\n\nconst processThirdPartyTypeFields = ({ typeComposer, schemaQueryType }) => {\n  // Fix for types that refer to Query. Thanks Relay Classic!\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const field = typeComposer.getField(fieldName)\n    const fieldType = field.type.toString()\n    if (fieldType.replace(/[[\\]!]/g, ``) === schemaQueryType.name) {\n      typeComposer.extendField(fieldName, {\n        type: fieldType.replace(schemaQueryType.name, `Query`),\n      })\n    }\n  })\n}\n\nconst addCustomResolveFunctions = async ({ schemaComposer, parentSpan }) => {\n  const intermediateSchema = schemaComposer.buildSchema()\n  const createResolvers = resolvers => {\n    Object.keys(resolvers).forEach(typeName => {\n      const fields = resolvers[typeName]\n      if (schemaComposer.has(typeName)) {\n        const tc = schemaComposer.getOTC(typeName)\n        Object.keys(fields).forEach(fieldName => {\n          const fieldConfig = fields[fieldName]\n          if (tc.hasField(fieldName)) {\n            const originalFieldConfig = tc.getFieldConfig(fieldName)\n            const originalTypeName = originalFieldConfig.type.toString()\n            const originalResolver = originalFieldConfig.resolve\n            let fieldTypeName\n            if (fieldConfig.type) {\n              fieldTypeName = Array.isArray(fieldConfig.type)\n                ? stringifyArray(fieldConfig.type)\n                : fieldConfig.type.toString()\n            }\n\n            if (\n              !fieldTypeName ||\n              fieldTypeName.replace(/!/g, ``) ===\n                originalTypeName.replace(/!/g, ``) ||\n              tc.getExtension(`createdFrom`) === `thirdPartySchema`\n            ) {\n              const newConfig = {}\n              if (fieldConfig.type) {\n                newConfig.type = fieldConfig.type\n              }\n              if (fieldConfig.args) {\n                newConfig.args = fieldConfig.args\n              }\n              if (fieldConfig.resolve) {\n                newConfig.resolve = (source, args, context, info) =>\n                  fieldConfig.resolve(source, args, context, {\n                    ...info,\n                    originalResolver: originalResolver || defaultFieldResolver,\n                  })\n              }\n              tc.extendField(fieldName, newConfig)\n            } else if (fieldTypeName) {\n              report.warn(\n                `\\`createResolvers\\` passed resolvers for field ` +\n                  `\\`${typeName}.${fieldName}\\` with type \\`${fieldTypeName}\\`. ` +\n                  `Such a field with type \\`${originalTypeName}\\` already exists ` +\n                  `on the type. Use \\`createTypes\\` to override type fields.`\n              )\n            }\n          } else {\n            tc.addFields({ [fieldName]: fieldConfig })\n          }\n        })\n      } else {\n        report.warn(\n          `\\`createResolvers\\` passed resolvers for type \\`${typeName}\\` that ` +\n            `doesn't exist in the schema. Use \\`createTypes\\` to add the type ` +\n            `before adding resolvers.`\n        )\n      }\n    })\n  }\n  await apiRunner(`createResolvers`, {\n    schema: intermediateSchema,\n    createResolvers,\n    traceId: `initial-createResolvers`,\n    parentSpan,\n  })\n}\n\nconst addResolvers = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName()\n\n  // TODO: We should have an abstraction for keeping and clearing\n  // related TypeComposers and InputTypeComposers.\n  // Also see the comment on the skipped test in `rebuild-schema`.\n  typeComposer.removeInputTypeComposer()\n\n  const sortInputTC = getSortInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const filterInputTC = getFilterInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const paginationTC = getPagination({\n    schemaComposer,\n    typeComposer,\n  })\n  typeComposer.addResolver({\n    name: `findOne`,\n    type: typeComposer,\n    args: {\n      ...filterInputTC.getFields(),\n    },\n    resolve: findOne(typeName),\n  })\n  typeComposer.addResolver({\n    name: `findManyPaginated`,\n    type: paginationTC,\n    args: {\n      filter: filterInputTC,\n      sort: sortInputTC,\n      skip: `Int`,\n      limit: `Int`,\n    },\n    resolve: findManyPaginated(typeName),\n  })\n}\n\nconst addConvenienceChildrenFields = ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n}) => {\n  const nodes = nodeStore.getNodesByType(typeComposer.getTypeName())\n\n  const childNodesByType = groupChildNodesByType({ nodeStore, nodes })\n\n  Object.keys(childNodesByType).forEach(typeName => {\n    const typeChildren = childNodesByType[typeName]\n    const maxChildCount = _.maxBy(\n      _.values(_.groupBy(typeChildren, c => c.parent)),\n      g => g.length\n    ).length\n\n    if (maxChildCount > 1) {\n      typeComposer.addFields(createChildrenField(typeName))\n    } else {\n      typeComposer.addFields(createChildField(typeName))\n    }\n  })\n}\n\nfunction createChildrenField(typeName) {\n  return {\n    [_.camelCase(`children ${typeName}`)]: {\n      type: () => [typeName],\n      resolve(source, args, context) {\n        const { path } = context\n        return context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n      },\n    },\n  }\n}\n\nfunction createChildField(typeName) {\n  return {\n    [_.camelCase(`child ${typeName}`)]: {\n      type: () => typeName,\n      async resolve(source, args, context) {\n        const { path } = context\n        const result = await context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n        if (result && result.length > 0) {\n          return result[0]\n        } else {\n          return null\n        }\n      },\n    },\n  }\n}\n\nfunction groupChildNodesByType({ nodeStore, nodes }) {\n  return _(nodes)\n    .flatMap(node => (node.children || []).map(nodeStore.getNode))\n    .groupBy(node => (node.internal ? node.internal.type : undefined))\n    .value()\n}\n\nconst addTypeToRootQuery = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName()\n  // not strictly correctly, result is `npmPackage` and `allNpmPackage` from type `NPMPackage`\n  const queryName = _.camelCase(typeName)\n  const queryNamePlural = _.camelCase(`all ${typeName}`)\n  schemaComposer.Query.addFields({\n    [queryName]: typeComposer.getResolver(`findOne`),\n    [queryNamePlural]: typeComposer.getResolver(`findManyPaginated`),\n  })\n}\n\nconst parseTypes = ({\n  doc,\n  plugin,\n  createdFrom,\n  schemaComposer,\n  parentSpan,\n}) => {\n  const types = []\n  doc.definitions.forEach(def => {\n    const name = def.name.value\n    checkIsAllowedTypeName(name)\n\n    if (schemaComposer.has(name)) {\n      // We don't check if ast.kind matches composer type, but rely\n      // that this will throw when something is wrong and get\n      // reported by `reportParsingError`.\n\n      // Keep the original type composer around\n      const typeComposer = schemaComposer.get(name)\n\n      // After this, the parsed type composer will be registered as the composer\n      // handling the type name\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n\n      // Merge the parsed type with the original\n      mergeTypes({\n        schemaComposer,\n        typeComposer,\n        type: parsedType,\n        plugin,\n        createdFrom,\n        parentSpan,\n      })\n\n      // Set the original type composer (with the merged fields added)\n      // as the correct composer for the type name\n      schemaComposer.typeMapper.set(typeComposer.getTypeName(), typeComposer)\n    } else {\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n      types.push(parsedType)\n    }\n  })\n  return types\n}\n\nconst parseTypeDefs = ({\n  typeDefs,\n  plugin,\n  createdFrom,\n  schemaComposer,\n  parentSpan,\n}) => {\n  const doc = parse(typeDefs)\n  return parseTypes({ doc, plugin, createdFrom, schemaComposer, parentSpan })\n}\n\nconst reportParsingError = error => {\n  const { message, source, locations } = error\n\n  if (source && locations && locations.length) {\n    const { codeFrameColumns } = require(`@babel/code-frame`)\n\n    const frame = codeFrameColumns(\n      source.body,\n      { start: locations[0] },\n      { linesAbove: 5, linesBelow: 5 }\n    )\n    report.panic(\n      `Encountered an error parsing the provided GraphQL type definitions:\\n` +\n        message +\n        `\\n\\n` +\n        frame +\n        `\\n`\n    )\n  } else {\n    throw error\n  }\n}\n\nconst stringifyArray = arr =>\n  `[${arr.map(item =>\n    Array.isArray(item) ? stringifyArray(item) : item.toString()\n  )}]`\n\n// TODO: Import this directly from graphql-compose once we update to v7\nconst isNamedTypeComposer = type =>\n  type instanceof ObjectTypeComposer ||\n  type instanceof InputTypeComposer ||\n  type instanceof ScalarTypeComposer ||\n  type instanceof EnumTypeComposer ||\n  type instanceof InterfaceTypeComposer ||\n  type instanceof UnionTypeComposer\n\nconst validate = (type, value) => {\n  if (type instanceof GraphQLNonNull) {\n    if (value == null) {\n      throw new Error(`Expected non-null field value.`)\n    }\n    return validate(type.ofType, value)\n  } else if (type instanceof GraphQLList) {\n    if (!Array.isArray(value)) {\n      throw new Error(`Expected array field value.`)\n    }\n    return value.map(v => validate(type.ofType, v))\n  } else {\n    return type.parseValue(value)\n  }\n}\n"],"file":"schema.js"}