"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ink = require("ink");

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

// Handy hook from https://overreacted.io/making-setinterval-declarative-with-react-hooks/
function useInterval(callback, delay) {
  const savedCallback = (0, _react.useRef)(); // Remember the latest callback.

  (0, _react.useEffect)(() => {
    savedCallback.current = callback;
  }, [callback]); // Set up the interval.

  (0, _react.useEffect)(() => {
    function tick() {
      savedCallback.current();
    }

    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () => clearInterval(id);
    }

    return null;
  }, [delay]);
} // Track the width and height of the terminal. Responsive app design baby!


const useTerminalResize = () => {
  const _useContext = (0, _react.useContext)(_ink.StdoutContext),
        stdout = _useContext.stdout;

  const _useState = (0, _react.useState)([stdout.columns, stdout.rows]),
        sizes = _useState[0],
        setSizes = _useState[1];

  (0, _react.useEffect)(() => {
    stdout.on(`resize`, () => {
      setSizes([stdout.columns, stdout.rows]);
    });
    return () => {
      stdout.off(`resize`);
    };
  }, [stdout]);
  return sizes;
}; // Query the site's graphql instance for the latest count.


const fetchPageQueryCount = url => (0, _nodeFetch.default)(`${url}___graphql`, {
  method: `post`,
  body: JSON.stringify({
    query: `query MyQuery {
  allSitePage {
    totalCount
  }
}`
  }),
  headers: {
    "Content-Type": `application/json`
  }
}).then(res => res.json()).then(json => json.data.allSitePage.totalCount);

const Develop = props => {
  const _useState2 = (0, _react.useState)(0),
        pagesCount = _useState2[0],
        setPagesCount = _useState2[1];

  fetchPageQueryCount(props.stage.context.url).then(count => setPagesCount(count)); // Query for latest page count every second.
  // Built-in subscriptions would be nice.

  useInterval(() => {
    // POST to get pages count.
    fetchPageQueryCount(props.stage.context.url).then(count => setPagesCount(count));
  }, 1000);

  const _useTerminalResize = useTerminalResize(),
        width = _useTerminalResize[0];

  return _react.default.createElement(_ink.Box, {
    flexDirection: "column",
    marginTop: 2
  }, _react.default.createElement(_ink.Box, {
    textWrap: `truncate`
  }, `â€”`.repeat(width)), _react.default.createElement(_ink.Box, {
    height: 1,
    flexDirection: "row"
  }, _react.default.createElement(_ink.Color, null, pagesCount, " pages"), _react.default.createElement(_ink.Box, {
    flexGrow: 1
  }), _react.default.createElement(_ink.Color, null, props.stage.context.appName)));
};

var _default = Develop;
exports.default = _default;